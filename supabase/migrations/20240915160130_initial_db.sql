create type "public"."feature_visibility" as enum ('public', 'public-test', 'unpublished-test', 'unpublished');

create type "public"."invitation_status" as enum ('pending', 'refused', 'accepted');

create type "public"."note_visibility" as enum ('public', 'private');

create table "public"."features" (
    "id" uuid not null default gen_random_uuid(),
    "display_name" character varying,
    "description" text,
    "version" character varying not null,
    "note_id" bigint,
    "created_at" timestamp with time zone default now(),
    "visibility" feature_visibility not null default 'unpublished'::feature_visibility,
    "feature_name" character varying not null,
    "whats_new" jsonb[]
);


alter table "public"."features" enable row level security;

create table "public"."notes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by" text not null default requesting_user_id(),
    "title" text not null default 'New Note'::text,
    "description" text,
    "icon" character varying,
    "emoji" character varying,
    "visibility" note_visibility not null default 'private'::note_visibility
);


alter table "public"."notes" enable row level security;

create table "public"."profiles" (
    "user_id" text not null default requesting_user_id(),
    "created_at" timestamp with time zone not null default now(),
    "full_name" text,
    "handle" character varying not null,
    "email" text,
    "visible" boolean not null default true,
    "avatar" text,
    "session_update" uuid,
    "role" character varying not null default 'default'::character varying
);


alter table "public"."profiles" enable row level security;

create table "public"."roles" (
    "id" character varying not null default gen_random_uuid(),
    "display_name" character varying not null,
    "description" text
);


alter table "public"."roles" enable row level security;

create table "public"."shared_notes" (
    "created_at" timestamp with time zone not null default now(),
    "note_id" bigint not null,
    "user_id" text not null default requesting_user_id(),
    "by" text default requesting_user_id()
);


alter table "public"."shared_notes" enable row level security;

create table "public"."sources" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "note_id" bigint,
    "content" jsonb,
    "last_edited_at" timestamp with time zone not null default now(),
    "last_edited_by" text default requesting_user_id(),
    "version_note" text,
    "source_ref" bigint
);


alter table "public"."sources" enable row level security;

CREATE UNIQUE INDEX features_pkey ON public.features USING btree (id);

CREATE UNIQUE INDEX notes_pkey ON public.notes USING btree (id);

CREATE UNIQUE INDEX profiles_handle_key ON public.profiles USING btree (handle);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (user_id);

CREATE UNIQUE INDEX roles_pkey ON public.roles USING btree (id);

CREATE UNIQUE INDEX sources_pkey ON public.sources USING btree (id);

CREATE UNIQUE INDEX user_notes_pkey ON public.shared_notes USING btree (note_id, user_id);

alter table "public"."features" add constraint "features_pkey" PRIMARY KEY using index "features_pkey";

alter table "public"."notes" add constraint "notes_pkey" PRIMARY KEY using index "notes_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "public"."shared_notes" add constraint "user_notes_pkey" PRIMARY KEY using index "user_notes_pkey";

alter table "public"."sources" add constraint "sources_pkey" PRIMARY KEY using index "sources_pkey";

alter table "public"."features" add constraint "whats-new_duplicate_note_id_fkey" FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE SET NULL not valid;

alter table "public"."features" validate constraint "whats-new_duplicate_note_id_fkey";

alter table "public"."notes" add constraint "notes_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(user_id) ON DELETE CASCADE not valid;

alter table "public"."notes" validate constraint "notes_created_by_fkey";

alter table "public"."profiles" add constraint "profiles_handle_key" UNIQUE using index "profiles_handle_key";

alter table "public"."profiles" add constraint "profiles_role_fkey" FOREIGN KEY (role) REFERENCES roles(id) ON UPDATE CASCADE ON DELETE SET DEFAULT not valid;

alter table "public"."profiles" validate constraint "profiles_role_fkey";

alter table "public"."profiles" add constraint "profiles_session_update_fkey" FOREIGN KEY (session_update) REFERENCES features(id) not valid;

alter table "public"."profiles" validate constraint "profiles_session_update_fkey";

alter table "public"."shared_notes" add constraint "shared_notes_by_fkey" FOREIGN KEY (by) REFERENCES profiles(user_id) ON DELETE CASCADE not valid;

alter table "public"."shared_notes" validate constraint "shared_notes_by_fkey";

alter table "public"."shared_notes" add constraint "shared_notes_note_id_fkey" FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE not valid;

alter table "public"."shared_notes" validate constraint "shared_notes_note_id_fkey";

alter table "public"."shared_notes" add constraint "shared_notes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(user_id) ON DELETE CASCADE not valid;

alter table "public"."shared_notes" validate constraint "shared_notes_user_id_fkey";

alter table "public"."sources" add constraint "sources_last_edited_by_fkey" FOREIGN KEY (last_edited_by) REFERENCES profiles(user_id) ON DELETE CASCADE not valid;

alter table "public"."sources" validate constraint "sources_last_edited_by_fkey";

alter table "public"."sources" add constraint "sources_note_id_fkey" FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE not valid;

alter table "public"."sources" validate constraint "sources_note_id_fkey";

alter table "public"."sources" add constraint "sources_source_ref_fkey" FOREIGN KEY (source_ref) REFERENCES sources(id) not valid;

alter table "public"."sources" validate constraint "sources_source_ref_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_profile_role()
 RETURNS text
 LANGUAGE plpgsql
AS $function$declare
  profile_role text;
begin
  -- Select the role from the profiles table based on the retrieved profile_id
  select role into profile_role
  from profiles
  where user_id = requesting_user_id();

  -- If no role is found, return 'undefined' or any other appropriate default value
  if profile_role is null then
    return 'undefined';

  return profile_role;
  end if;

  return profile_role;
end;$function$
;

CREATE OR REPLACE FUNCTION public.insert_user_note()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$begin
    insert into user_notes (user_id, note_id, by)
    values (new.created_by, new.id, new.created_by);
    return new;
end;$function$
;

CREATE OR REPLACE FUNCTION public.requesting_user_id()
 RETURNS text
 LANGUAGE sql
 STABLE
AS $function$SELECT NULLIF(
    current_setting('request.jwt.claims', true)::json->>'sub',
    ''
)::text;$function$
;

CREATE OR REPLACE FUNCTION public.set_last_edited_by()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Set the last_edited_by column using the requesting_user_id function
    NEW.last_edited_by := requesting_user_id();

    -- Continue with the operation
    RETURN NEW;
END;
$function$
;

grant delete on table "public"."features" to "anon";

grant insert on table "public"."features" to "anon";

grant references on table "public"."features" to "anon";

grant select on table "public"."features" to "anon";

grant trigger on table "public"."features" to "anon";

grant truncate on table "public"."features" to "anon";

grant update on table "public"."features" to "anon";

grant delete on table "public"."features" to "authenticated";

grant insert on table "public"."features" to "authenticated";

grant references on table "public"."features" to "authenticated";

grant select on table "public"."features" to "authenticated";

grant trigger on table "public"."features" to "authenticated";

grant truncate on table "public"."features" to "authenticated";

grant update on table "public"."features" to "authenticated";

grant delete on table "public"."features" to "service_role";

grant insert on table "public"."features" to "service_role";

grant references on table "public"."features" to "service_role";

grant select on table "public"."features" to "service_role";

grant trigger on table "public"."features" to "service_role";

grant truncate on table "public"."features" to "service_role";

grant update on table "public"."features" to "service_role";

grant delete on table "public"."notes" to "anon";

grant insert on table "public"."notes" to "anon";

grant references on table "public"."notes" to "anon";

grant select on table "public"."notes" to "anon";

grant trigger on table "public"."notes" to "anon";

grant truncate on table "public"."notes" to "anon";

grant update on table "public"."notes" to "anon";

grant delete on table "public"."notes" to "authenticated";

grant insert on table "public"."notes" to "authenticated";

grant references on table "public"."notes" to "authenticated";

grant select on table "public"."notes" to "authenticated";

grant trigger on table "public"."notes" to "authenticated";

grant truncate on table "public"."notes" to "authenticated";

grant update on table "public"."notes" to "authenticated";

grant delete on table "public"."notes" to "service_role";

grant insert on table "public"."notes" to "service_role";

grant references on table "public"."notes" to "service_role";

grant select on table "public"."notes" to "service_role";

grant trigger on table "public"."notes" to "service_role";

grant truncate on table "public"."notes" to "service_role";

grant update on table "public"."notes" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."roles" to "anon";

grant insert on table "public"."roles" to "anon";

grant references on table "public"."roles" to "anon";

grant select on table "public"."roles" to "anon";

grant trigger on table "public"."roles" to "anon";

grant truncate on table "public"."roles" to "anon";

grant update on table "public"."roles" to "anon";

grant delete on table "public"."roles" to "authenticated";

grant insert on table "public"."roles" to "authenticated";

grant references on table "public"."roles" to "authenticated";

grant select on table "public"."roles" to "authenticated";

grant trigger on table "public"."roles" to "authenticated";

grant truncate on table "public"."roles" to "authenticated";

grant update on table "public"."roles" to "authenticated";

grant delete on table "public"."roles" to "service_role";

grant insert on table "public"."roles" to "service_role";

grant references on table "public"."roles" to "service_role";

grant select on table "public"."roles" to "service_role";

grant trigger on table "public"."roles" to "service_role";

grant truncate on table "public"."roles" to "service_role";

grant update on table "public"."roles" to "service_role";

grant delete on table "public"."shared_notes" to "anon";

grant insert on table "public"."shared_notes" to "anon";

grant references on table "public"."shared_notes" to "anon";

grant select on table "public"."shared_notes" to "anon";

grant trigger on table "public"."shared_notes" to "anon";

grant truncate on table "public"."shared_notes" to "anon";

grant update on table "public"."shared_notes" to "anon";

grant delete on table "public"."shared_notes" to "authenticated";

grant insert on table "public"."shared_notes" to "authenticated";

grant references on table "public"."shared_notes" to "authenticated";

grant select on table "public"."shared_notes" to "authenticated";

grant trigger on table "public"."shared_notes" to "authenticated";

grant truncate on table "public"."shared_notes" to "authenticated";

grant update on table "public"."shared_notes" to "authenticated";

grant delete on table "public"."shared_notes" to "service_role";

grant insert on table "public"."shared_notes" to "service_role";

grant references on table "public"."shared_notes" to "service_role";

grant select on table "public"."shared_notes" to "service_role";

grant trigger on table "public"."shared_notes" to "service_role";

grant truncate on table "public"."shared_notes" to "service_role";

grant update on table "public"."shared_notes" to "service_role";

grant delete on table "public"."sources" to "anon";

grant insert on table "public"."sources" to "anon";

grant references on table "public"."sources" to "anon";

grant select on table "public"."sources" to "anon";

grant trigger on table "public"."sources" to "anon";

grant truncate on table "public"."sources" to "anon";

grant update on table "public"."sources" to "anon";

grant delete on table "public"."sources" to "authenticated";

grant insert on table "public"."sources" to "authenticated";

grant references on table "public"."sources" to "authenticated";

grant select on table "public"."sources" to "authenticated";

grant trigger on table "public"."sources" to "authenticated";

grant truncate on table "public"."sources" to "authenticated";

grant update on table "public"."sources" to "authenticated";

grant delete on table "public"."sources" to "service_role";

grant insert on table "public"."sources" to "service_role";

grant references on table "public"."sources" to "service_role";

grant select on table "public"."sources" to "service_role";

grant trigger on table "public"."sources" to "service_role";

grant truncate on table "public"."sources" to "service_role";

grant update on table "public"."sources" to "service_role";

create policy "Admin have full-access"
on "public"."features"
as permissive
for select
to public
using ((get_profile_role() = 'admin'::text));


create policy "Only public features can be read"
on "public"."features"
as permissive
for select
to public
using (((visibility = 'public'::feature_visibility) OR (get_profile_role() = 'public-tester'::text) OR (get_profile_role() = 'private-tester'::text)));


create policy "Enable creators to edit their notes"
on "public"."notes"
as permissive
for update
to public
using (((requesting_user_id() = created_by) OR (EXISTS ( SELECT 1
   FROM shared_notes
  WHERE ((shared_notes.note_id = notes.id) AND (shared_notes.user_id = requesting_user_id()))))));


create policy "Enable insert for authenticated users only"
on "public"."notes"
as permissive
for insert
to authenticated
with check (true);


create policy "Only owners can view their notes"
on "public"."notes"
as permissive
for select
to authenticated
using (((requesting_user_id() = created_by) OR (EXISTS ( SELECT 1
   FROM shared_notes
  WHERE ((shared_notes.note_id = notes.id) AND (shared_notes.user_id = requesting_user_id()))))));


create policy "Owners can delete their notes"
on "public"."notes"
as permissive
for delete
to authenticated
using ((requesting_user_id() = created_by));


create policy "Every user can create a public profile"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Users can edit their own profiles"
on "public"."profiles"
as permissive
for update
to authenticated
using ((user_id = requesting_user_id()));


create policy "Users can search and view for visible users"
on "public"."profiles"
as permissive
for select
to authenticated
using (((requesting_user_id() = user_id) OR (visible = true)));


create policy "Enable read access for all users"
on "public"."roles"
as permissive
for select
to public
using (true);


create policy "Non-owners users can view notes they're linked with"
on "public"."shared_notes"
as permissive
for select
to authenticated
using (((user_id = requesting_user_id()) OR (by = requesting_user_id())));


create policy "Owners can connect themself to their notes and invite others"
on "public"."shared_notes"
as permissive
for insert
to authenticated
with check (((requesting_user_id() = ( SELECT notes.created_by
   FROM notes
  WHERE (notes.id = shared_notes.note_id))) OR (EXISTS ( SELECT 1
   FROM shared_notes un
  WHERE ((un.note_id = shared_notes.note_id) AND (un.user_id = requesting_user_id()))))));


create policy "Users and note ownsers can delete their connections"
on "public"."shared_notes"
as permissive
for delete
to authenticated
using (((requesting_user_id() = ( SELECT notes.created_by
   FROM notes
  WHERE (notes.id = shared_notes.note_id))) OR (EXISTS ( SELECT 1
   FROM shared_notes user_notes_1
  WHERE ((user_notes_1.note_id = user_notes_1.note_id) AND (user_notes_1.user_id = requesting_user_id()))))));


create policy "Note owners can delete sources"
on "public"."sources"
as permissive
for delete
to authenticated
using ((requesting_user_id() = ( SELECT notes.created_by
   FROM notes
  WHERE (notes.id = sources.note_id))));


create policy "Only creators can update their notes"
on "public"."sources"
as permissive
for update
to authenticated
using (((requesting_user_id() = ( SELECT notes.created_by
   FROM notes
  WHERE (notes.id = sources.note_id))) OR (EXISTS ( SELECT 1
   FROM shared_notes
  WHERE ((shared_notes.note_id = sources.note_id) AND (shared_notes.user_id = requesting_user_id()))))));


create policy "Only note creator can insert a note source"
on "public"."sources"
as permissive
for insert
to authenticated
with check (((requesting_user_id() = ( SELECT notes.created_by
   FROM notes
  WHERE (notes.id = sources.note_id))) OR (EXISTS ( SELECT 1
   FROM shared_notes
  WHERE ((shared_notes.note_id = sources.note_id) AND (shared_notes.user_id = requesting_user_id()))))));


create policy "Only note owners can view note sources"
on "public"."sources"
as permissive
for select
to public
using (((requesting_user_id() = ( SELECT notes.created_by
   FROM notes
  WHERE (notes.id = sources.note_id))) OR (EXISTS ( SELECT 1
   FROM shared_notes
  WHERE ((shared_notes.note_id = sources.note_id) AND (shared_notes.user_id = requesting_user_id()))))));


CREATE TRIGGER insert_user_note_trigger AFTER INSERT ON public.notes FOR EACH ROW EXECUTE FUNCTION insert_user_note();
ALTER TABLE "public"."notes" DISABLE TRIGGER "insert_user_note_trigger";

CREATE TRIGGER on_insert_or_update BEFORE INSERT OR UPDATE ON public.sources FOR EACH ROW EXECUTE FUNCTION set_last_edited_by();


