
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."invitation_status" AS ENUM (
    'pending',
    'refused',
    'accepted'
);

ALTER TYPE "public"."invitation_status" OWNER TO "postgres";

COMMENT ON TYPE "public"."invitation_status" IS 'Describe the status of the invite to a note';

CREATE OR REPLACE FUNCTION "public"."insert_user_note"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$begin
    insert into user_notes (user_id, note_id)
    values (new.created_by, new.id);
    return new;
end;$$;

ALTER FUNCTION "public"."insert_user_note"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."requesting_user_id"() RETURNS "text"
    LANGUAGE "sql" STABLE
    AS $$SELECT NULLIF(
    current_setting('request.jwt.claims', true)::json->>'sub',
    ''
)::text;$$;

ALTER FUNCTION "public"."requesting_user_id"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."set_last_edited_by"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    -- Set the last_edited_by column using the requesting_user_id function
    NEW.last_edited_by := requesting_user_id();

    -- Continue with the operation
    RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."set_last_edited_by"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."notes" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "text" DEFAULT "public"."requesting_user_id"() NOT NULL,
    "title" "text" DEFAULT 'New Note'::"text" NOT NULL,
    "description" "text",
    "icon" character varying,
    "emoji" character varying
);

ALTER TABLE "public"."notes" OWNER TO "postgres";

COMMENT ON TABLE "public"."notes" IS 'Notes created by users';

ALTER TABLE "public"."notes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "user_id" "text" DEFAULT "public"."requesting_user_id"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "full_name" "text",
    "handle" character varying NOT NULL,
    "email" "text",
    "visible" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

COMMENT ON TABLE "public"."profiles" IS 'Clerk users that created a public profile';

CREATE TABLE IF NOT EXISTS "public"."sources" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "note_id" bigint,
    "content" "jsonb",
    "last_edited_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "last_edited_by" "text" DEFAULT "public"."requesting_user_id"(),
    "version_note" "text",
    "source_ref" bigint
);

ALTER TABLE "public"."sources" OWNER TO "postgres";

COMMENT ON TABLE "public"."sources" IS 'Notes content in JSONB with versioning';

ALTER TABLE "public"."sources" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."sources_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_notes" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "note_id" bigint NOT NULL,
    "user_id" "text" DEFAULT "public"."requesting_user_id"() NOT NULL
);

ALTER TABLE "public"."user_notes" OWNER TO "postgres";

ALTER TABLE ONLY "public"."notes"
    ADD CONSTRAINT "notes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_handle_key" UNIQUE ("handle");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("user_id");

ALTER TABLE ONLY "public"."sources"
    ADD CONSTRAINT "sources_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_notes"
    ADD CONSTRAINT "user_notes_pkey" PRIMARY KEY ("note_id", "user_id");

CREATE OR REPLACE TRIGGER "insert_user_note_trigger" AFTER INSERT ON "public"."notes" FOR EACH ROW EXECUTE FUNCTION "public"."insert_user_note"();

CREATE OR REPLACE TRIGGER "on_insert_or_update" BEFORE INSERT OR UPDATE ON "public"."sources" FOR EACH ROW EXECUTE FUNCTION "public"."set_last_edited_by"();

ALTER TABLE ONLY "public"."sources"
    ADD CONSTRAINT "sources_note_id_fkey" FOREIGN KEY ("note_id") REFERENCES "public"."notes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."sources"
    ADD CONSTRAINT "sources_source_ref_fkey" FOREIGN KEY ("source_ref") REFERENCES "public"."sources"("id");

ALTER TABLE ONLY "public"."user_notes"
    ADD CONSTRAINT "user_notes_note_id_fkey" FOREIGN KEY ("note_id") REFERENCES "public"."notes"("id") ON DELETE CASCADE;

CREATE POLICY "Enable creators to edit their notes" ON "public"."notes" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."user_notes"
  WHERE (("user_notes"."note_id" = "notes"."id") AND ("user_notes"."user_id" = "public"."requesting_user_id"())))));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."notes" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Every user can create a public profile" ON "public"."profiles" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Non-owners users can view notes they're linked with" ON "public"."user_notes" FOR SELECT TO "authenticated" USING (("user_id" = "public"."requesting_user_id"()));

CREATE POLICY "Note owners can delete sources" ON "public"."sources" FOR DELETE TO "authenticated" USING (("public"."requesting_user_id"() = ( SELECT "notes"."created_by"
   FROM "public"."notes"
  WHERE ("notes"."id" = "sources"."note_id"))));

CREATE POLICY "Only creators can update their notes" ON "public"."sources" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user_notes"
  WHERE (("user_notes"."note_id" = "sources"."note_id") AND ("user_notes"."user_id" = "public"."requesting_user_id"())))));

CREATE POLICY "Only note creator can insert a note source" ON "public"."sources" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."user_notes"
  WHERE (("user_notes"."note_id" = "sources"."note_id") AND ("user_notes"."user_id" = "public"."requesting_user_id"())))));

CREATE POLICY "Only note owners can view note sources" ON "public"."sources" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."user_notes"
  WHERE (("user_notes"."note_id" = "sources"."note_id") AND ("user_notes"."user_id" = "public"."requesting_user_id"())))));

CREATE POLICY "Only owners can view their notes" ON "public"."notes" FOR SELECT TO "authenticated" USING ((("public"."requesting_user_id"() = "created_by") OR (EXISTS ( SELECT 1
   FROM "public"."user_notes"
  WHERE (("user_notes"."note_id" = "notes"."id") AND ("user_notes"."user_id" = "public"."requesting_user_id"()))))));

CREATE POLICY "Owners can connect themself to their notes and invite others" ON "public"."user_notes" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."user_notes" "un"
  WHERE (("un"."note_id" = "un"."note_id") AND ("un"."user_id" = "public"."requesting_user_id"())))));

CREATE POLICY "Owners can delete their notes" ON "public"."notes" FOR DELETE TO "authenticated" USING (("public"."requesting_user_id"() = "created_by"));

CREATE POLICY "Users and note ownsers can delete their connections" ON "public"."user_notes" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user_notes" "user_notes_1"
  WHERE (("user_notes_1"."note_id" = "user_notes_1"."note_id") AND ("user_notes_1"."user_id" = "public"."requesting_user_id"())))));

CREATE POLICY "Users can edit their own profiles" ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("user_id" = "public"."requesting_user_id"()));

CREATE POLICY "Users can search and view for visible users" ON "public"."profiles" FOR SELECT TO "authenticated" USING ((("public"."requesting_user_id"() = "user_id") OR ("visible" = true)));

ALTER TABLE "public"."notes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."sources" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_notes" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."insert_user_note"() TO "anon";
GRANT ALL ON FUNCTION "public"."insert_user_note"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."insert_user_note"() TO "service_role";

GRANT ALL ON FUNCTION "public"."requesting_user_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."requesting_user_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."requesting_user_id"() TO "service_role";

GRANT ALL ON FUNCTION "public"."set_last_edited_by"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_last_edited_by"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_last_edited_by"() TO "service_role";

GRANT ALL ON TABLE "public"."notes" TO "anon";
GRANT ALL ON TABLE "public"."notes" TO "authenticated";
GRANT ALL ON TABLE "public"."notes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."notes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."notes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."notes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."sources" TO "anon";
GRANT ALL ON TABLE "public"."sources" TO "authenticated";
GRANT ALL ON TABLE "public"."sources" TO "service_role";

GRANT ALL ON SEQUENCE "public"."sources_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."sources_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."sources_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_notes" TO "anon";
GRANT ALL ON TABLE "public"."user_notes" TO "authenticated";
GRANT ALL ON TABLE "public"."user_notes" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
